{
  "hash": "78c0af3cabee72ee26f8465537612388",
  "result": {
    "markdown": "---\ntitle: \"Data visualization part 1\"\n---\n\n\n# Plotting data\n\nR is absolutely great for plotting\n\n## Enter ggplot2\n\n-Describe ggplot2 - part of tidyverse.\n\nOne of the great things about it is that it breaks down each plot into a number of layers that can be changed (more or less) independently.\n\n## Grammar of graphics\n\n-What is grammar of graphics\n\n-What layers are there in ggplot2\n\n-ggplot() starts the plot and each layer is chained together with a `+`.\n\n## Aesthetics\n\n-What are aesthetics\n\n-What are the basic aesthetics\n\n## Geometries\n\nAfter providing a dataset and aesthetics we have the variables and their mapping to axes on the plot. However, we still don't have any shapes to actually represent the data. Do we want a scatter plot? Or maybe a bar plot? Or a line plot? The shapes used to represent the data are defined in the geometry layer. Generally all geometries start with `geom_` so for example `geom_point()` will make a scatter plot while `geom_bar()` will make a bar plot.\n\nGeometries differ in what aesthetics they accept. You can look up what these are by looking up help for a given geometry. They also differ in what kinds of variables they expect (any combination of categorical vs continuous variables)\n\n-What are some common geometries:\n\nNow we can make our first plot in ggplot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: pakiet 'ggplot2' zosta≈Ç zbudowany w wersji R 4.2.2\n```\n:::\n:::\n\n\nThere is one more thing about geometries and aesthetics. You can set global aesthetics inside the `ggplot()` function. If you do so these aesthetics will be used by default by all geometries in that plot. You can also set aesthetics inside a given geometry (in fact you can even set a different dataset for a given geometry; this is what we meant by independence of layers) but then they will be used only for this particular geometry and won't be inherited by other ones.\n\nCompare the to plots below. They produce the same result:\n\n\n::: {.cell}\n\n:::\n\n\nAnd the second plot:\n\n\n::: {.cell}\n\n:::\n\n\n## Attributes\n\nThere are situations in which you don't want to set some feature to be represented by a given variable but to set them to a fixed value for the entire plot/geometry. For example you might want to set the color or size of all points in a scatter plot. That's when you set attributes. They are declared inside geometries but outside of aesthetics.\n\n## Scales\n\nOne more thing are functions for working with scales: they allow you to have more control over how each scale is represented (e.g. what the breaks and values are, should the scale be transformed)\n\n\n::: {.cell}\n\n:::\n\n\nA cautionary tale about the limits: scale functions allow you to\n\n## Colors\n\nScale functions also allow you to control the color and fill aesthetics.\n\n-   Discuss brewer and viridis packages\n\nWhat to be mindful of when setting color palettes:\n\n-   how people perceive color\n\n-   what information you want to represent (is there some order to the variable, is it divergent etc.)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}