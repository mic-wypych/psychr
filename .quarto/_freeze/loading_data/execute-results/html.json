{
  "hash": "9e7fc2e52afe485e9d3f37b97fd368ae",
  "result": {
    "markdown": "---\ntitle: \"loading_data\"\n---\n\n\n## Loading data in R\n\nThere are many ways of loading a dataset or file into your R session so that you can use it. How to do it depends mainly on how the data is stored.\n\n## Loading flat files\n\n-   loading csv and tsv files\n\n## Loading data from SPSS\n\nHaven vs foreign package\n\nData coming from statistical software can't be loaded in such a simple way.\n\nMainly because it stores more information. Here we'll focus on .sav format which is used by SPSS. Apart from rows and columns (observations and variables) .sav format stores additional information e.g. on value labels - it is able to attach labels to numbers (like in Likert scales 1 can refer to 'strongly disagree'). SPSS also allows to specify user-defined missing values (a common practice is to e.g. code missing values with 99).\n\nThis means we have to somehow deal with this additional information when loading .sav files. There are essentially two ways to go about it: reduce the amount of information stored or introduce a new type of values that can store this additional information. This first approach is taken by the `foreign` package. The second one is taken by `haven` package.\n\n**Discuss the consequences: you keep types of values native to R but loose information or you introduce a new format of data that keeps the information but might not work with some types of analysis**\n\n### loading data with foreign\n\nGo through loading data in foreign\n\nPlease notice though that the documentation for `read.spss()` function in foreign states that it was originally developed in 2000 and does not guarantee compatibility with newer versions of SPSS (whcih hasn't changed much since but still).\n\nBy default `foregin` will load data into a list rather than a dataframe. You can load into a data frame by setting the argument `to.data.frame` to `TRUE`. Another useful argument is `use.value.labels` which, if set to `TRUE` will convert the numerical values stored in .sav into their corresponding labels. This is the way foreign deals with labelled values: you can use either numeric values or their labels. In the documentation of the function you can read about additional arguments that control handling of labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(foreign)\n```\n:::\n\n\nOnce we have the data loaded lets see what types of values we have.\n\n### loading data with haven\n\nHaven package deals differently with loading labeled variables. It introduces a new type of variable: haven-labelled data. It is capable of storing both numeric values and labels attached to it **by adding an attribute to the variable with labels.loops_conditionals**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\n```\n:::\n\n\nNow that we have loaded the dataset, lets look at the types of variables we have\n\n## Loading excel files\n\nOne additional thing you have to take into account when loading data from excel is that it can store a number of sheets in a single file. This has to be taken into account when loading such file into R.\n\nOne of the packages available for loading excel data is `readxl`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\n## Loading jsons\n\nThere are situations in which you might work with data that does not come from simple tables but is stored in completely different way. One example that we'll introduce here is the json format. Json is short for Javascript Object Notation and is a common way of storing data in the web.\n\nJson stores data as key - value pairs. These might not approximate tabular format and can be nested and fairly complicated. This type of data is especially common when downloading data directly from the web (e.g. social media data) or from APIs. You can imagine a file that stores information on each user of a website: their username, password and all posts that they have created along with information on each post like their creation date. It might look something like this:\n\n**Put an image of a json file here**\n\nBecause json can be a complicated and nested structure the type of data that best approximates it in R is a list. There are ways to ask R to try and handle such list structure and try to convert it into a data frame but it does not always work. Cleaning an unevenly nested json can be a real pain sometimes!\n\nWe'll look at an example of a NASA API that stores information on the number of people currently present on space stations. The package we'll use to load the data is `jsonlite`.\n\n\n::: {.cell}\n\n:::\n\n\nNotice how the loaded object looks like. It is a list with **...**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}