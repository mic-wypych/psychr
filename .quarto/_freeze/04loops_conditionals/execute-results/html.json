{
  "hash": "d7b1749e4c1e642ef81b5b9b63f5b621",
  "result": {
    "markdown": "---\ntitle: \"Loops and conditionals\"\nauthor: \"Michal Wypych\"\n---\n\n\n# The flow of code\n\nNow you know how to create different kinds of objects and how to perform simple operations with them. However, very often you want to add more control over how operations are ran in R. You might want to execute a command only if a condition is satisfied. Or you might want to make the same operations for a number of elements. These are the kinds of situations for which you want to use flow control. What this refers to is basically altering how the code is executed. In a regular situations all commands from your script are executed from the first line all the way down to the last line. Flow control alters that either by specifying condiotinal statements that tell R to execute a given chunk of code only if a condition is met or by using loops that repeat a given chunk of code.\n\n## Conditional statements\n\nAnother way conditional statements are referred to which may be more intuitive are if else statements. They allow you to tell R to execute given chunk of code if a condition is met and to do something else if the condition is not met.\n\nThe general logic of conditional statements looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (condition) {\n  Do this\n  And do this\n}\n```\n:::\n\n\nA single if statement can have multiple conditions chained together with `|` and `&` operators. So, for example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 5\ny <- -5\n\nif (x > 0 & y < 0) {\n  print(\"Hooray!\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hooray!\"\n```\n:::\n:::\n\n\nIn many situations you want to state what is to be done if a condition is met and what to do otherwise. This turns your statement into an if else one. The only difference is that after the if statement you add else and specify what to do then in curly brackets. With this knowledge you can already create the rules for a simple game like paper, rock, scissors!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#set the choice for each player\nplayer1 <- 'scissors'\nplayer2 <- 'rock'\n\n#define an if statement that outputs the result of the game\nif (player1 == player2) {\n  print('draw')\n} else if ((player1 == 'scissors' & player2 == 'paper') |\n           (player1 == 'paper' & player2 == 'rock') |\n           (player1 == 'rock' & player2 == 'scissors')) {\n  print('player 1 wins')\n} else if ((player2 == 'scissors' & player1 == 'paper') |\n           (player2 == 'paper' & player1 == 'rock') |\n           (player2 == 'rock' & player1 == 'scissors')) {\n  print('player 2 wins')\n} else {\n  print('these are not allowed moves')\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"player 2 wins\"\n```\n:::\n:::\n\n\nTake a moment to study the code above. Notice what kinds of conditions are included in that statement. When writing an if statement it's a good idea to consider all possible situations and how your if statement maps to them. In a paper, rock, scissors game you can have 3 outcomes: both players choose the same option (a draw), player 1 wins or player 2 wins. Notice that the code above includes also a fourth options specified in the last else statement. What if someone makes a typo and writes `rook` instead of `rock`? That last else statement safeguards us for such situations. If we didn't include it and someone made a type then our if else statement wouldn't produce anything. You can play around with different values of player1 and player2 to see the results.\n\nOne more thing about `if else` statements: in many situations it is a good idea to give some thought to what exactly a given statement is supposed to do and how large the statement needs to be. A good example is an `if` statement that is supposed to run some check (e.g. make sure that we are working with a numeric value) and stop execution if it detects a problem. Imagine a situation in which we want to do some calculations on numbers and want to make sure that we are indeed working with numeric values. you could design an `if else` statement that would do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 'not a number'\ny <- 3\nif ((class(x) != 'numeric') | (class(y) != 'numeric')) {\n  stop('This is not a number!')\n} else {\n  x + y\n}\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): This is not a number!\n```\n:::\n:::\n\n\nTake a moment to look at the code above. Do you think it is good? It certainly gets the job done. Do you think it could be simplified?\n\nIn fact the `else` part is redundant in this case. The if statement runs the check on `x` and `y` and stops execution of the code if any of them is not numeric. If both values are numeric the execution of code simply proceeds. In this case adding an `else` statement makes the code harder to read (and imagine what would happen if we had to perform a number of checks like this! We would need a lot of `if else` statements that would make everything even less clear). The code below does the same thing as the `if else` statement above but is more clear.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 'not a number'\ny <- 3\nif ((class(x) != 'numeric') | (class(y) != 'numeric')) {\n  stop('This is not a number!')\n}\n## Error in eval(expr, envir, enclos): This is not a number!\nx + y\n## Error in x + y: argument nieliczbowy przekazany do operatora dwuargumentowego\n```\n:::\n\n\n## Loops\n\nAnother way of controlling the flow of your code is by repeating a given chunk of code. There are two basic ways to do that: repeat something a number of times or keep repeating until some condition is met. The first way is called a for loop and the second one a while loop.\n\n### for loops\n\nBefore we make our first for loop lets take a moment to see when a for loop is not needed. Recall again that a lot of things in R are vectorized. This means that operations on vectors are conducted element-wise. Thanks to this if you want to e.g. add 5 to each value stored in a numeric vector (in the language of a for loop: for every element of a vector, add 5 to it) you can just write `vector_name + 5`. No need for more complicated, explicit repetition. However, there are situations in which you have to make an explicit for loop to repeat something n times. The general structure of a for loops looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in object) {\n  Do this to each element\n}\n```\n:::\n\n\nIt's worth keeping in mind what the `i` in the for loop is. In the example above `i` will be every consecutive element of object. However we could do a similar thing with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:length(object)) {\n  do this to object[i]\n}\n```\n:::\n\n\nNow each `i` is a number from 1 to thew length of `object` and we access each element of `object` by using a proper (`ith`) index. Which way of running a for loop you choose might depend on the context. looping explicitly over elements of an object rather than indexes can be more intuitive but imagine you don't want to do something to every element of an object but only to to a subset (e.g. from 3rd inwards). Doing it with indexes is easier. Generally the best approach is to think what you need first and write code code second, not the other way around.\n\nLets say we want to get a geometric sequence which starts from 1 and in which each next number is the previous number times 1.5. We can easily create the first 20 numbers from that sequence with a for loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- c(1)\n\nfor (i in 1:20)  {\n  v[i+1] <- v[i]*1.5\n}\nv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]    1.00000    1.50000    2.25000    3.37500    5.06250    7.59375\n [7]   11.39062   17.08594   25.62891   38.44336   57.66504   86.49756\n[13]  129.74634  194.61951  291.92926  437.89389  656.84084  985.26125\n[19] 1477.89188 2216.83782 3325.25673\n```\n:::\n:::\n\n\nLets look at another example. sThere is a dataset available in R on airquality in New York City called `airquality`. It stores information on ozone, sun, wind and temperature from 5 months. One of the things that might be of interest when looking at the dataset is what was the average value of each of the variables informing on airquality. Lets first look at the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"airquality\")\nd <- airquality\nd <- na.omit(d)\n\nhead(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n7    23     299  8.6   65     5   7\n8    19      99 13.8   59     5   8\n```\n:::\n:::\n\n\nThe first 4 columns are of interest here. We can loop over these columns and for each calculate their mean and append it to the vector of results (which we need to create before starting the loop). Just to be sure which value is the mean of which variable we can name the elements of the resulting vector with names of the columns after the for loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults <- c()\n\nfor (v in d[,1:4]) {\n  m <- mean(v)\n  results <- c(results, m)\n}\nnames(results) <- colnames(d[,1:4])\nresults\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Ozone   Solar.R      Wind      Temp \n 42.09910 184.80180   9.93964  77.79279 \n```\n:::\n:::\n\n\n### While loops\n\nWhile loops will keep executing a given chunk of code as long as some condition is met. They aren't very common in R, at least not until you start building your own algorithms or simulations from scratch. However, it's worth knowing what they are in case you encounter them.\n\nWe can use a while loop to make a very simple simulation. Lets say we want to see how temperatures change from a given temperature (lets say 20 degrees Celsius) across time and that we represent time by some random change from each previous temperature. We can create a vector with such predicted temperatures and see how long it takes for it to reach a certain level (lets say 30 degrees Celsius). We represent the change by adding a random value from a normal distribution with mean = .05 and standard deviation = .5 (this is what the `rnorm(1,.05,.5)` does). The while loop would look something like this: We first create the initial value and a vector to store all temperatures and next we keep adding the random value to our temperature and storing all temperatures until it reaches 30. The last line tells R to plot all the temperatures as a line plot. This is of course a very, very, very simplistic simulation (temperatures don't change in such a simple way) but it works to show you the idea behind while loops. We can then calculate e.g. how long it took for the temperature to reach a certain level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC <- 20\nresults <- c(20)\nwhile (C < 30) {\n  C <- C + rnorm(1,.05,.5)\n  results <- c(results, C)\n}\n\nplot(results, type = 'line', lwd = 2, col=4, xlab = \"days\", ylab = \"temperature\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in plot.xy(xy, type, ...): plot type 'line' will be truncated to first\ncharacter\n```\n:::\n\n::: {.cell-output-display}\n![](04loops_conditionals_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nBecause while loops do not have a fixed number of iteration they can potentially run infinitely. This is usually not something we want so it's a good idea to make sure that your while loop eventually stops. In case you do get stuck in an infinite loop you can press `Esc` in your console and this should make RStudio stop the loop by force.\n\nTruth is while loops are not common in R. You will rarely find yourself in situation where you need to perform some actions while a given condition is true (e.g. keep a program running until a user presses exit; keep displaying a board of a game until a player makes a move). However, it's still good to know what while loops are so that you will know one when you see it.\n\n## Apply family\n\nThere is a special family of functions in R that makes working with for loops a bit easier. These functions let you specify what to loop over and what function to apply to each element but in a function rather than a whole loop with all the curly brackets and stuff.\n\nThe reason why this is a whole family of functions is that you can iterate in various ways and you can get the output in different formats. There are more functions in the family but the general ones are:\n\n-   `lapply()` - loops over elements of a vector/list and returns a list\n\n-   `sapply()` - same as lapply but tries to simplify the result to a vector or matrix\n\n-   `apply()` - used for looping over 2 dimensional structures - it lets you specify if you want to loop over rows or columns\n\n-   `tapply()` - same as apply but lets you split the object you are looping over based on some factor (e.g. imagine you want to calculate the mean value of your dependent variable for each experimental condition).\n\nLets see some of these in action.\n\n### Example 1:\n\nImagine you are working with a list in R. You want to get information on how many elements each object in the list has. `sapply` makes it very easy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list <- list(\n  1:50,\n  sample(300, 5),\n  c(\"random\", \"vector\")\n)\n\nsapply(my_list, length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50  5  2\n```\n:::\n:::\n\n\n### Example 2:\n\nRemember the airquality dataset and calculating the mean of each numeric variable? We can achieve the same thing with `apply()` instead of a for loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(d[,1:4], 2, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Ozone   Solar.R      Wind      Temp \n 42.09910 184.80180   9.93964  77.79279 \n```\n:::\n:::\n\n\nNotice that the means calculated above are global means from the entire dataset. What is probably much more sensible is a mean for each month. There is one additional trick needed here. `Tapply` won't allow us to split a number of columns by some vector and perform a given operation on each of the columns. That's because `tapply` works on vectors. In order to get monthly means for all 4 columns we need to combine `apply` with `tapply.` What we need to do is start with apply and loop over the 4 columns of interest and for each of them use tapply that will split a given column by month and calculate the means. Combining functions can get us really far if only we give some thought to what each function does (including what are its inputs and outputs) and what we really need to do. notice that `tapply()` is preceded by `function(x)`. We'll learn more about them when looking at functions but for now think about it as an expression that allows us to specify some function that takes `x` as its main argument (in this case these are going to be columns from the `airquality` dataset) and apply some custom function to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(d[,1:4], 2, function(x) tapply(x, d$Month, mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Ozone  Solar.R      Wind     Temp\n5 24.12500 182.0417 11.504167 66.45833\n6 29.44444 184.2222 12.177778 78.22222\n7 59.11538 216.4231  8.523077 83.88462\n8 60.00000 173.0870  8.860870 83.69565\n9 31.44828 168.2069 10.075862 76.89655\n```\n:::\n:::\n\n\nOne important thing about apply functions is that they are generally faster than explicit for loops. Same thing goes for vectorized code as well - it's faster than a for loop. We can make a simple comparison by using the `microbenchmark` package to make the same thing with a for loop and `apply()` function. We'll save it as `bench`\n\n\n\n\n\nNow if we look at the results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUnit: milliseconds\n                                               expr    min      lq      mean\n for (i in 1:ncol(df)) {     print(mean(df[, i])) } 6.4675 7.42925  9.641934\n                                 apply(df, 2, mean) 6.7408 7.25800 11.727508\n  median      uq      max neval\n 8.29995 9.47520  57.7508   100\n 7.90820 9.80995 115.4954   100\n```\n:::\n:::\n\n\nYou can see that `apply()` is much faster than a for loop.\n\n## Exercises\n\n1.  Try to code the logic of assigning points to players of a prisoner dilemma with a given matrix:\\\n    ![](images/the-prisoners-dilemma-using-game-theory-to-achieve-the-optimal-solution.jpg){width=\"400\"}\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"exercise 1\"}\n    #' we need to specify outcomes based on Prisoner 1 and prisoner 2 choices.\n    #' We'll need a series of ifelse statements to code each of the 4 possible outcomes.\n    #' Lets define the choices as choice1 and choice2 and store infoirmation on which choice each on of these is.\n    #' Next lets define some choices by the prisoners.\n    #' We need to define if statements that will cover all possible combinations of choices for prisoners 1 and 2.\n    #' We can do it by:\n    #' 1. Creating an if else statement for the choice of prisoner 1 \n    #' 2. inside that if else statement create if else statements for prisoner 2.\n    #' 3. Assign vector of results depending on ech combination of prisoner 1 and 2 choices.\n    #' You can copy this code and change values of Prisoner1 and Prisoner2 to choice1 or choice2 to see if the results change.\n    \n    choice1 <- \"Stay silent\"\n    choice2 <- \"Betray and testify\"\n    Prisoner1 <- choice1\n    Prisoner2 <- choice2\n    \n    if(Prisoner1 == choice1) {\n      if(Prisoner2 == choice1) {\n        result <-  c(P1_result = 1, P2_result = 1)\n      } else {\n        result <-  c(P1_result = 0, P2_result = 10)\n      }\n    } else {\n      if(Prisoner2 == choice1) {\n        result <-  c(P1_result = 10, P2_result = 0)\n      } else {\n        result <-  c(P1_result = 6, P2_result = 6)\n      }\n    }\n    result\n    ```\n    :::\n\n\n2.  Create a for loop that will print out the first 50 numbers from the Fibonacci sequence\n\n\n    \n\n\n3.  Given the `iris` dataframe (you can load it with `data(\"iris\")` loop over all of its columns and calculate the mean of every numeric column\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"exercise 3\"}\n    #' What we are supposed to do is:\n    #' 1. load the iris dataset\n    #' 2. loop over numeric columns (there is 1 column that is not numeric)\n    #' 3. for each column calculate its mean\n    \n    data(\"iris\")\n    \n    results <- c()\n    for(i in 1:ncol(iris)) {\n      if(is.numeric(iris[,i])) {\n        results <- c(results, mean(iris[,i]))\n      }\n    }\n    \n    #if we want to format the names of values in the vector we can extract the names of numeric columns.\n    #The sapply function returns a vector of logical values with TRUE for every numeric column\n    #in the dataset. We can use that vector to subset the dataset and get only numeric columns.\n    names(results) <- colnames(iris[,sapply(iris, is.numeric)])\n    results\n    \n    \n    #We can also shorten the for loop and use apply instead. \n    #THis time we'll need to loop over the dataset with numeric columns selected\n    apply(iris[,sapply(iris, is.numeric)], 2, mean)\n    ```\n    :::\n\n\n4.  Create a vector of numbers randomly drawn from a normal distribution with a mean of 2 and standard deviation 0.5. Loop over a sequence of 100 numbers from the minimum to the maximum of the vector you created. For each value in the sequence calculate the sum of squared differences from each value in the vector. Store all the sums in a new vector. Which value in the sequence minimizes the sum of squared distances?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code  code-fold=\"true\" code-summary=\"exercise 4\"}\n    #' What the exercise asks us to do is:\n    #' 1. Create a vector of numbers drawn from normal distribution wiht mean = 2 and sd = .5. We can use rnorm() for that.\n    #' 2. loop over a sequence of numbers from the minimum to maximum of our vector and for each value calculate the sum of squared distances of each number from a given number in the sequence. This will require:\n    #' 2a. Define a vector to store the sums of squared distances\n    #' 2b. Start the for loop over seq(min(v1), max(v1), .1). You can change the distance in seq from .1 to something else if you want to see with different resolution\n    #' 2c. For each i in the sequence calculate the sum of squared differences and append it to vector\n    #' 3. Preferrably name the vector with results\n    #' 4. Find the minimum number\n    \n    #the number we get as mimizing the sum of squared differences is certainly \n    #going to be the one closest to the mean (you can check it with mean(v1) if you want)!\n    \n    v1 <- rnorm(1000, 2, .5)\n    sums_squared <- c()\n    \n    for(i in seq(min(v1), max(v1), .1)) {\n      diff_i <- sum((i - v1)^2)\n      sums_squared <- c(sums_squared, diff_i)\n    }\n    \n    to_name <- seq(min(v1), max(v1), .1)\n    names(sums_squared) <- to_name\n    \n    sums_squared[which.min(sums_squared)]\n    ```\n    :::\n",
    "supporting": [
      "04loops_conditionals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}