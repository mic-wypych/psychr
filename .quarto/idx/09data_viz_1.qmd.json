{"title":"Data visualization part 1","markdown":{"yaml":{"title":"Data visualization part 1"},"headingText":"Plotting data","containsRefs":false,"markdown":"\n\n\nVisualization is an indispensible part of data analysis. If done properly it allows us to understand a lot more about our analysis/data and to understand it much faster than by wading through text. It also looks really nice! And good news is that R is absolutely great for plotting! In this class we'll look at some basic R plotting functions first and then dive into the world of `ggplot2`, easily the best plotting package out there.\n\nIn this class we'll use the `midwest` dataset from `ggplot2` package. It stores a bunch of information about population of 5 midwestern states: Illinois, Indiana, Michigan, Ohio and Wisconsin. The data are at county level. Lets briefly look at our dataset for this class (all the variables are also described [here](https://ggplot2.tidyverse.org/reference/midwest.html)):\n\n```{r}\nlibrary(tidyverse)\ndata(\"midwest\")\nglimpse(midwest)\n```\n\n## Some base R graphics\n\nBefore we move on to `ggplot2` lets look at some built-in base R graphics. The `graphics` and `stats` packages have some function for plotting already available.\n\n-   The most generic is the `plot()` function. It allows you to create simple plots in R. The first arguments are usually the variables you want to map onto the axes:\n\n    ```{r}\n    plot(midwest$percadultpoverty, midwest$percollege)\n    ```\n\n-   `plot()` function has a bunch of arguments you can use to customize the plot. For example we can change the color and thickness of the points and add a title to the plot and axes:\n\n    ```{r}\n    plot(midwest$percadultpoverty, midwest$percollege, col = 2, lwd = 2,\n         main = \"Percent in college vs percent adults in poverty\",\n         xlab = \"Percent adults in poverty\",\n         ylab = \"percent in college\")\n    ```\n\n    Unfortunately the `plot()` function does not have great documentation and finding some of the arguments can be quite difficult. Some of these arguments also have very unintuitive names (e.g. argument named `lty` specifies line type, good luck memorizing that!). Base R has additional functions for more specific plots. Namely, `lines()` will create a line plot, `points()` will create a scatterplot and `boxplot()` will create a boxplot. These functions have better documentation than the general `plot()` though I still don't consider it great. Lets see some of these in action. `lines()` and `points()` require that you first initialize the plots with the coordinates set to the variables of interest with the `plot()` function. You can specify what kind of plot (line plot, scatterplot etc) you want inside `plot()` by setting the `type` argument. E.g. setting it to `l` will create a line plot.\n\n-   Lines: Lets say we want to make a line plot that will display the 10th, 50th and 90th quantile of percent of adults in poverty in all states. We'll also introduce the `axis()` function which gives you some control over how the x and y axis should look like. Here we need it because `lines()` does not like categorical values at x axis so we need to add the state names (we add them at the top) with `axis()`:\n\n    ```{r}\n    #get the quantiles\n    library(dplyr)\n    #calculate quantiles at of percadultpoverty for each state\n    list_q <- tapply(midwest$percadultpoverty, midwest$state, quantile, c(.1,.5,.9))\n\n    #convert the result into a dataframe with each column as one quantile and each row as one state\n    df_q <- data.frame()\n    df_q <- bind_rows(list_q[[1]], list_q[[2]], list_q[[3]], list_q[[4]], list_q[[5]])\n    colnames(df_q) <- c(\"q_10\", \"q_50\", \"q_90\")\n\n    #plot them\n    plot(1:5, df_q$q_10, ylim = c(0,20), type = \"l\", col = 2, lwd = 2, lty = 2)\n    lines(1:5, df_q$q_50, col = 4, lwd = 2, lty = 1)\n    lines(1:5, df_q$q_90, col = 2, lwd = 2, lty = 2)\n    axis(side = 3, at = 1:5, labels = unique(midwest$state))\n    ```\n\n    One important thing here: notice how each element is added to the plot on a new line. These functions are not chained together in any way and we are not saving any intermediate objects. This is pretty unusual in R (although perfectly normal in other programming languages). It's just how base R plotting works.\n\n-   Points: We can recreate the plot that we made with the generic `plot()` function but using `points()`:\n\n    ```{r}\n    plot(midwest$percadultpoverty, midwest$percollege)\n    points(midwest$percadultpoverty, midwest$percollege, col = 2, lwd = 2, \n         main = \"Percent in college vs percent adults in poverty\",\n         xlab = \"Percent adults in poverty\",\n         ylab = \"percent in college\")\n\n    ```\n\n-   Boxplots are useful for showing differences in distributions of some continuous variable between levels of some factor. For example lets say we want to\n\n    ```{r}\n    boxplot(midwest$percadultpoverty ~ midwest$state)\n    ```\n\nThere are also built-in functions for plotting distributions: `hist()` for histograms, `plot(density())` for density functions and `plot.ecdf()` for cumulative distribution plots. Lets look at all 3 plots for percent of population in college:\n\n```{r}\nhist(midwest$percollege)\n```\n\n```{r}\nplot(density(midwest$percollege))\n```\n\n```{r}\nplot.ecdf(midwest$percollege)\n```\n\nOne problem with base R plots is that they are not intuitive. Lots of arguments have weird names and doing some things is really not so easy. Making more complicated plots (e.g. adding text annotations on the plot) is also generally hard to do. That's why we'll focus on `ggplot2` which is much more intuitive and versatile.\n\n## Enter ggplot2\n\n`ggplot2` is a package in th `tidyverse` designed for making data visualizations. One of the great things about it is that it breaks down each plot into a number of layers that can be changed (more or less) independently. This idea is encapsulated in what is called the grammar of graphics.\n\n## Grammar of graphics\n\nThe name comes from a book by Leland Wilkinson under the same title. Basically making a plot with the grammar of graphics is like making a building with lego blocks with different colors. You can mix the colors of the blocks to get exactly the building you want. Similalry in `ggplot2` you can use different layers to make the plot that you want (e.g. mix different datasets or add a line to a scatterplot). Ok, but what are those layers? In `ggplot2` there are following layers:\n\n-   Data: the datasets (usually data frames) you want to plot\n\n-   Aesthetics: mapping between data and the plot, e.g. what is to be mapped to x and y axis\n\n-   Geometry: shapes used to represent data\n\n-   Statistics: any statistics like means or confidence intervals that you want to add\n\n-   Coordinates: coordinates of the plot (axes limits, cartesian vs polar coordinates etc.)\n\n-   Facets: this layer is used for making subplots (e.g. separate plot for each level of a categorical variable)\n\n-   Theme: All non-data stuff like fonts, titles\n\nYou always start the plot with `ggplot()` function. All the lego blocks that you want to add are chained together with `+`. Lets see what happens when we pass the first layer, data, to our plot:\n\n```{r}\nmidwest %>%\n  ggplot()\n```\n\nHmm, we get en empty plot. Why is that? Well, all we supplied so far is the data we want to plot but we did not include any additional information so R doesn't know yet what exactly should be displayed on the plot. We need to add the next layer: aesthetics.\n\n## Aesthetics\n\nAesthetics map what variables should be displayed on the plot in what way. In this layer you declare e.g. what should be on the x and y axis. The basic aesthetics (the list is not exhaustive) are:\n\n-   x axis\n\n-   y axis\n\n-   colour: colour of points and lines (that includes borders of e.g. rectangles)\n\n-   fill: colour of filling\n\n-   alpha: transparency. 0 means completely transparent, 1 means not transparency\n\n-   size: point size\n\n-   linewidth: width of lines\n\n-   linetype: type of line (e.g. dashed)\n\n-   shape: shape of points (circles, rectangles, etc.)\n\n-   labels: text\n\nAesthetics are declared within `aes()`. It can be declared within `ggplot()` function, separately or inside geoms (more on those in a second). Lets see what happens when we add aesthetics to our plot:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  aes(x = percadultpoverty, y = percollege)\n```\n\nNow we got our axes! Notice there is no data on the plot though. That's because so far we have declared which dataset to plot and which variables to map onto axes but we did not specify how to represent the data. This is declared in the next layer: geometry.\n\n## Geometries\n\nAfter providing a dataset and aesthetics we have the variables and their mapping to axes on the plot. However, we still don't have any shapes to actually represent the data. Do we want a scatter plot? Or maybe a bar plot? Or a line plot? The shapes used to represent the data are defined in the geometry layer. Generally all geometries start with `geom_` so for example `geom_point()` will make a scatter plot while `geom_bar()` will make a bar plot.\n\nGeometries differ in what aesthetics they accept. You can look up what these are by looking up help for a given geometry. Each geometry has all the aesthetics it accepts in its documentation. They also differ in what kinds of variables they expect (any combination of categorical vs continuous variables).\n\nLets expand the initial plot with `geom_point()` to make a scatterplot!\n\n```{r}\nmidwest %>%\n  ggplot() +\n  aes(x = percadultpoverty, y = percollege) +\n  geom_point()\n```\n\nWe got a plot very similar to the one we made with base R! We can customize it further if we want to. Lets say we want to represent each state with a different color. We just need to add a color aesthetic. R will add a legend automatically:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  aes(x = percadultpoverty, y = percollege, color = state) +\n  geom_point()\n```\n\nThere is one more thing about geometries and aesthetics. Remember you can declare aesthetics in different places? You can set global aesthetics inside the `ggplot()` function. If you do so these aesthetics will be used by default by all geometries in that plot. You can also set aesthetics inside a given geometry (in fact you can even set a different dataset for a given geometry; this is what we meant by independence of layers) but then they will be used only for this particular geometry and won't be inherited by other ones.\n\nCompare the to plots below. They produce the same result:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percadultpoverty, y = percollege)) +\n  geom_point()\n```\n\nAnd the second plot:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege))\n```\n\nSome common geometries you can encounter are as follows:\n\n-   `geom_histogram()` and `geom_density()` for displaying distributions of continuous variables\n\n-   `geom_bar()` for displaying counts of categorical variables (you can change counts to other summary statistic but more on that later)\n\n-   `geom_col()` for displaying differences in some continuous variable between levels of a factor\n\n-   `geom_point()`: your good old scatterplot\n\n-   `geom_boxplot()`\n\n-   `geom_violin()` a bit like boxplot but displays a distribution of a continuous variable for each level of a factor\n\n-   `geom_smooth()` for displaying lines of best fit (e.g. from a linear model)\n\nYou can check them out if you want to to see how they look like.\n\nLets look at 2 thing in a bit more details with regard to geometries. First, lets look at combining geoms. We can add a line of best fit to our scatterplot if we want to by adding an additional geometry. `geom_smooth()` will use a GAM or LOESS by default (depending on how many unique values x variable has) but we can set it to a linear model by adding `method = \"lm\"`. A linear model probably won't do well here but it's just for demonstration:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percadultpoverty, y = percollege)) +\n  geom_point() +\n  geom_smooth(method  =\"lm\")\n```\n\nSee? Just like building with lego blocks.\n\nLast thing before we move on: a few words on `geom_bar()` and `geom_col()`. They often get mixed up at the beginning because they both show bar plots. `geom_bar()` takes a single aesthetic and is generally used to display counts of some factor variable. For example if we wanted to see how many counties are there in each state we could use `geom_bar()` (later we'll see how to display e.g. means of variables across levels of a factor):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x=state)) +\n  geom_bar()\n```\n\n`geom_col()` takes at least 2 aesthetics: x and y. It needs one categorical and one continuous variable. By default it is going to sum all values in a given category. e.g. lets look at the sum of area of all counties in each of the states:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x=state, y = area)) +\n  geom_col()\n```\n\nWhat if we wanted to look at the average county area in each state? We can e.g. first summarise the dataset and then pipe it to plot:\n\n```{r}\nmidwest %>%\n  summarise(mean_area = mean(area), .by = state) %>%\n  ggplot(aes(x = state, y = mean_area)) +\n  geom_col()\n```\n\nSince `ggplot2` is part of `tidyverse` it's really easy to pipe a set of dplyr functions into a plot in a single call!\n\n## Attributes\n\nThere are situations in which you don't want to set some feature to be represented by a given variable but to set them to a fixed value for the entire plot/geometry. For example you might want to set the color or size of all points in a scatter plot. That's when you set attributes. They are declared inside geometries but outside of aesthetics. Lets say we want to take our scatterplot and change the transparency and color of the points. We can do it by defining them inside geometry. The names for the arguments are the same as for aesthetics. Just remember to use them outside of `aes()`!\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege), color = \"red\", alpha = .3)\n```\n\nBy the way, you can define colors either with hex values as RGB but you can also use one of the built-in colors in R. You can check all the names of those built-in colors with `colors()` function. Another neat thing is that in newer version of RStudio you can see the preview of the colors when you type them in a script.\n\nOne potential problem is when aesthetic and scale come into conflict. E.g. what will happen if we map color to state variable and then set it as attribute? Lets see:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = state), color = \"red\", alpha = .3)\n```\n\nThe attribute overrides the aesthetic. It's something to remember about.\n\n## Scales\n\nOne more thing are functions for working with scales: they allow you to have more control over how each scale is represented (e.g. what the breaks and values are, should the scale be transformed). For example notice that R automatically chose some limits for the scales and displayed breaks (the values on the axes). You can have more control over that with the `scale_` family of functions. It's a family of functions because you need to declare: 1) which aesthetic you want to change and 2) what kind of scale you are working with (continuous, discrete or binned). So for example `scale_x_continuous()` allows you to customize a continuous x axis. The basic things that you can change inside the `scale_` function are: breaks, labels, limits and the expand argument (the last one controls additional space - notice that e.g. on the x axis there is a little space on the left of 0 and there is similarly a little space to the right of the point with the highest percadultpoverty value).\n\nLets say now we want to work a little with our scales. Lets change the breaks to be every 5%, change the labels to be actually in percentage format (there is a very neat function in `scales` package called `label_percent()` that does that. We just need to set scale argument in it to 1 because in our dataset e.g. 10% is represented as 10 and not 0.1):\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege), color = \"red\", alpha = .3) + scale_x_continuous(breaks = seq(0,40,5),labels = scales::label_percent(scale = 1)) +\n  scale_y_continuous(breaks = seq(0,50,5),labels = scales::label_percent(scale = 1))\n```\n\nA cautionary tale about using limits in `scale_` functions: These limits work by filtering the data to be plotted. This can be a serious problem because you basically lose data when plotting and only get a warning about it. This can be especially problematic if you are trying to display bars or ranges because if e.g. one side of an interval falls out of the limits, the entire range will not be displayed. Lets see what happens if we set limits on one of our axes:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege), color = \"red\", alpha = .3) + scale_x_continuous(breaks = seq(0,25,5),labels = scales::label_percent(scale = 1), limits = c(0, 25)) +\n  scale_y_continuous(breaks = seq(0,50,5),labels = scales::label_percent(scale = 1))\n```\n\nNotice the warning about removed data. This is especially problematic in bar plots because by default they start from 0 (which can be a good thing because it reduces misinterpretation of visual differences between bars but can be undesired e.g. if displaying results of a 1-5 Likert scale which doesn't have a 0). Another problematic situation is when plotting some summaries e.g. means and limiting axes. Limits will work before calculating the summaries so you might get nonsensical plots because of this like below where we try to plot mean `percadultpoverty` by each state and limit the y axis to 10:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percadultpoverty)) +\n  geom_bar(stat = \"summary\", fun = mean) +\n  scale_y_continuous(limits = c(0,10))\n```\n\nThe warning now says that 220 rows were removed! What's even weirded we still got our plot but the means were calculated based on trimmed variable.\n\n## Colors\n\nScale functions also allow you to control the color and fill aesthetics. You can change which color palette you want to use. There are many packages available with predefined color palettes (e.g. `viridis` or `MetBrewer`). We'll focus on the built-in Brewer palettes and on making manual palettes. Brewer palettes can be invoked with `scale_color_brewer()` and `scale_fill_brewer()`. You can choose color palette by setting the `palette` argument. I can never remember the names of all the palettes but you can easily google them (just type something like \"R brewer palettes). Lets change our palette on the scatterplot:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = state), alpha = .8) +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\nYou can also set your own colors and create your own palette. In order to do that use `scale_color_manual()` and `scale_fill_manual()`. You can set the colors as hex or built-in colors in `values` argument. You can provide it a simple text vector or named vector to explicitly map each categorical variable (if you have categorical variables mapped to color or fill):\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = state), alpha = .8) +\n  scale_color_manual(values = c(\"IL\" = \"#5f0f40\", \"IN\" = \"#9a031e\", \"MI\" = \"#fb8b24\", \"OH\" = \"#e36414\", \"WI\" = \"#0f4c5c\"))\n```\n\nfor contiunous variables matched to color aesthetic this works a little different. You need `scale_color_gradient()` function. `scale_color_gradient2()` allows you to specify a midpoint and thus make a divergent palette. Lets code county area with color this time and specify our own palette with midpoint at the mean county area:\n\n```{r}\nmidpoint <- mean(midwest$area)\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = area)) +\n  scale_color_gradient2(low = \"#e63946\", mid = \"#8d99ae\", high = \"#1d3557\", midpoint = midpoint)\n```\n\nWhen using colors on a plot you need to be mindful of a number of things. Color is used to convey information so it should be visible. Try to avoid very small contrasts if you want something to stand out (e.g. using light grey on white background). Also remember that not everyone perceives color the same way so it is worth checking if your palette is suitable for everyone. Finally, color shouldn't be used just because \"it looks cool\". Generally everything that is in a plot should be there for a reason. Remember that data visualizations should convey information. That's their primary purpose. Using color can help with that but it can also make things more difficult to understand. E.g. using a lot of flashy colors just for the sake of using colors might make a plot much more difficult to understand for viewers. Finally, colors can be used to convey different kinds of information, from continuity (e.g. a palette going from light to dark blue to code a continuous variable liek percentage of adults in college), divergence (a palette going from dark blue through light blue and red to dark red to display polarization of opinions) or contrast (e.g. contrasting colors in a palette to display different US states).\n\n## Positions\n\nOne issue that pops up quite often, especially when adding color to aesthetics, is how to deal with overlapping values. On the plots above there were some overlapping points on the scatterplot but we could easily deal with it by adjusting transparency. There are situations when this is not so easy or even not desirable. For example you can't just as easily deal with overlapping bars. `ggplot2` has a number of position adjustments that help us deal with this problem. THey allow us to stack, normalize or nudge shapes so that they won't overlap. The basic position adjustments are:\n\n-   dodge: move shapes to the side (how much is controlled with the `width` argument)\n\n-   stack: stack shapes on top of each other\n\n-   fill: stack shapes on top of each other and normalize height (good for displaying proportions)\n\n-   jitter: add some random noise (you can adjust how much with `height` and `width` arguments). It's good for cluttered scatterplots\n\n-   nudge: slightly move shapes, good for nudging text\n\nOk, lets see some of them in action. We'll start with jitter. In some situation you might want to display point with a categorical x axis. This can be useful when showing a distribution, e.g. with `geom_violin()` and adding all the data points on top of it with `geom_point()`. IF we don't use any position adjustments we'll get something like this (we want to look at distribution of percollege in each state):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percollege)) +\n  geom_violin(alpha = .4) +\n  geom_point()\n```\n\nOk, lets add some jitter but constrain it to be only in width (adding jitter in height might change how we interpret some values!):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percollege)) +\n  geom_violin(alpha = .4) +\n  geom_point(position = position_jitter(height = 0, width = .2))\n```\n\nThis makes it much easier to see all the points!\n\nNow we'll move on to position adjustments in barplots. Lets say we want to look at number of counties in each state that are or are not in metro area(`inmetro` variable). We can do it by adding a `fill` aesthetic to the `geom_bar()`:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, fill = as.factor(inmetro))) +\n  geom_bar()\n```\n\nBy default `geom_bar()` uses the stack position adjustment. Lets experiment with it a little and see what happens if we add a fill adjustment:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, fill = as.factor(inmetro))) +\n  geom_bar(position = \"fill\")\n```\n\nNow we have proportions rather than counts. Remember that order here matters (proportions sum to 1 within each state. If we wanted to see the share of each state in metro vs non-metro counties in the midwest we would need to switch x and fill aesthetics).\n\nTo see position dodge we will look at `geom_col()`. Lets say we want to plot the average percentage of adults in poverty in metro and nonmetro counties in each state:\n\n```{r}\nmidwest %>%\n  summarise(mean_perc = mean(percadultpoverty), .by = c(state, inmetro)) %>%\n  ggplot(aes(x = inmetro, y = mean_perc, fill = state)) +\n  geom_col()\n```\n\nThis looks pretty bad right? `geom_col()` also uses stack adjustment by default. To make it more readable and compare the percentages we can use the dodge adjustment:\n\n```{r}\nmidwest %>%\n  summarise(mean_perc = mean(percadultpoverty), .by = c(inmetro, state)) %>%\n  ggplot(aes(x = as.factor(inmetro), y = mean_perc, fill = state)) +\n  geom_col(position = position_dodge(width = .9))\n```\n\nMuch better! Now we can compare the percentages across state and metro vs non-metro counties!\n","srcMarkdownNoYaml":"\n\n# Plotting data\n\nVisualization is an indispensible part of data analysis. If done properly it allows us to understand a lot more about our analysis/data and to understand it much faster than by wading through text. It also looks really nice! And good news is that R is absolutely great for plotting! In this class we'll look at some basic R plotting functions first and then dive into the world of `ggplot2`, easily the best plotting package out there.\n\nIn this class we'll use the `midwest` dataset from `ggplot2` package. It stores a bunch of information about population of 5 midwestern states: Illinois, Indiana, Michigan, Ohio and Wisconsin. The data are at county level. Lets briefly look at our dataset for this class (all the variables are also described [here](https://ggplot2.tidyverse.org/reference/midwest.html)):\n\n```{r}\nlibrary(tidyverse)\ndata(\"midwest\")\nglimpse(midwest)\n```\n\n## Some base R graphics\n\nBefore we move on to `ggplot2` lets look at some built-in base R graphics. The `graphics` and `stats` packages have some function for plotting already available.\n\n-   The most generic is the `plot()` function. It allows you to create simple plots in R. The first arguments are usually the variables you want to map onto the axes:\n\n    ```{r}\n    plot(midwest$percadultpoverty, midwest$percollege)\n    ```\n\n-   `plot()` function has a bunch of arguments you can use to customize the plot. For example we can change the color and thickness of the points and add a title to the plot and axes:\n\n    ```{r}\n    plot(midwest$percadultpoverty, midwest$percollege, col = 2, lwd = 2,\n         main = \"Percent in college vs percent adults in poverty\",\n         xlab = \"Percent adults in poverty\",\n         ylab = \"percent in college\")\n    ```\n\n    Unfortunately the `plot()` function does not have great documentation and finding some of the arguments can be quite difficult. Some of these arguments also have very unintuitive names (e.g. argument named `lty` specifies line type, good luck memorizing that!). Base R has additional functions for more specific plots. Namely, `lines()` will create a line plot, `points()` will create a scatterplot and `boxplot()` will create a boxplot. These functions have better documentation than the general `plot()` though I still don't consider it great. Lets see some of these in action. `lines()` and `points()` require that you first initialize the plots with the coordinates set to the variables of interest with the `plot()` function. You can specify what kind of plot (line plot, scatterplot etc) you want inside `plot()` by setting the `type` argument. E.g. setting it to `l` will create a line plot.\n\n-   Lines: Lets say we want to make a line plot that will display the 10th, 50th and 90th quantile of percent of adults in poverty in all states. We'll also introduce the `axis()` function which gives you some control over how the x and y axis should look like. Here we need it because `lines()` does not like categorical values at x axis so we need to add the state names (we add them at the top) with `axis()`:\n\n    ```{r}\n    #get the quantiles\n    library(dplyr)\n    #calculate quantiles at of percadultpoverty for each state\n    list_q <- tapply(midwest$percadultpoverty, midwest$state, quantile, c(.1,.5,.9))\n\n    #convert the result into a dataframe with each column as one quantile and each row as one state\n    df_q <- data.frame()\n    df_q <- bind_rows(list_q[[1]], list_q[[2]], list_q[[3]], list_q[[4]], list_q[[5]])\n    colnames(df_q) <- c(\"q_10\", \"q_50\", \"q_90\")\n\n    #plot them\n    plot(1:5, df_q$q_10, ylim = c(0,20), type = \"l\", col = 2, lwd = 2, lty = 2)\n    lines(1:5, df_q$q_50, col = 4, lwd = 2, lty = 1)\n    lines(1:5, df_q$q_90, col = 2, lwd = 2, lty = 2)\n    axis(side = 3, at = 1:5, labels = unique(midwest$state))\n    ```\n\n    One important thing here: notice how each element is added to the plot on a new line. These functions are not chained together in any way and we are not saving any intermediate objects. This is pretty unusual in R (although perfectly normal in other programming languages). It's just how base R plotting works.\n\n-   Points: We can recreate the plot that we made with the generic `plot()` function but using `points()`:\n\n    ```{r}\n    plot(midwest$percadultpoverty, midwest$percollege)\n    points(midwest$percadultpoverty, midwest$percollege, col = 2, lwd = 2, \n         main = \"Percent in college vs percent adults in poverty\",\n         xlab = \"Percent adults in poverty\",\n         ylab = \"percent in college\")\n\n    ```\n\n-   Boxplots are useful for showing differences in distributions of some continuous variable between levels of some factor. For example lets say we want to\n\n    ```{r}\n    boxplot(midwest$percadultpoverty ~ midwest$state)\n    ```\n\nThere are also built-in functions for plotting distributions: `hist()` for histograms, `plot(density())` for density functions and `plot.ecdf()` for cumulative distribution plots. Lets look at all 3 plots for percent of population in college:\n\n```{r}\nhist(midwest$percollege)\n```\n\n```{r}\nplot(density(midwest$percollege))\n```\n\n```{r}\nplot.ecdf(midwest$percollege)\n```\n\nOne problem with base R plots is that they are not intuitive. Lots of arguments have weird names and doing some things is really not so easy. Making more complicated plots (e.g. adding text annotations on the plot) is also generally hard to do. That's why we'll focus on `ggplot2` which is much more intuitive and versatile.\n\n## Enter ggplot2\n\n`ggplot2` is a package in th `tidyverse` designed for making data visualizations. One of the great things about it is that it breaks down each plot into a number of layers that can be changed (more or less) independently. This idea is encapsulated in what is called the grammar of graphics.\n\n## Grammar of graphics\n\nThe name comes from a book by Leland Wilkinson under the same title. Basically making a plot with the grammar of graphics is like making a building with lego blocks with different colors. You can mix the colors of the blocks to get exactly the building you want. Similalry in `ggplot2` you can use different layers to make the plot that you want (e.g. mix different datasets or add a line to a scatterplot). Ok, but what are those layers? In `ggplot2` there are following layers:\n\n-   Data: the datasets (usually data frames) you want to plot\n\n-   Aesthetics: mapping between data and the plot, e.g. what is to be mapped to x and y axis\n\n-   Geometry: shapes used to represent data\n\n-   Statistics: any statistics like means or confidence intervals that you want to add\n\n-   Coordinates: coordinates of the plot (axes limits, cartesian vs polar coordinates etc.)\n\n-   Facets: this layer is used for making subplots (e.g. separate plot for each level of a categorical variable)\n\n-   Theme: All non-data stuff like fonts, titles\n\nYou always start the plot with `ggplot()` function. All the lego blocks that you want to add are chained together with `+`. Lets see what happens when we pass the first layer, data, to our plot:\n\n```{r}\nmidwest %>%\n  ggplot()\n```\n\nHmm, we get en empty plot. Why is that? Well, all we supplied so far is the data we want to plot but we did not include any additional information so R doesn't know yet what exactly should be displayed on the plot. We need to add the next layer: aesthetics.\n\n## Aesthetics\n\nAesthetics map what variables should be displayed on the plot in what way. In this layer you declare e.g. what should be on the x and y axis. The basic aesthetics (the list is not exhaustive) are:\n\n-   x axis\n\n-   y axis\n\n-   colour: colour of points and lines (that includes borders of e.g. rectangles)\n\n-   fill: colour of filling\n\n-   alpha: transparency. 0 means completely transparent, 1 means not transparency\n\n-   size: point size\n\n-   linewidth: width of lines\n\n-   linetype: type of line (e.g. dashed)\n\n-   shape: shape of points (circles, rectangles, etc.)\n\n-   labels: text\n\nAesthetics are declared within `aes()`. It can be declared within `ggplot()` function, separately or inside geoms (more on those in a second). Lets see what happens when we add aesthetics to our plot:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  aes(x = percadultpoverty, y = percollege)\n```\n\nNow we got our axes! Notice there is no data on the plot though. That's because so far we have declared which dataset to plot and which variables to map onto axes but we did not specify how to represent the data. This is declared in the next layer: geometry.\n\n## Geometries\n\nAfter providing a dataset and aesthetics we have the variables and their mapping to axes on the plot. However, we still don't have any shapes to actually represent the data. Do we want a scatter plot? Or maybe a bar plot? Or a line plot? The shapes used to represent the data are defined in the geometry layer. Generally all geometries start with `geom_` so for example `geom_point()` will make a scatter plot while `geom_bar()` will make a bar plot.\n\nGeometries differ in what aesthetics they accept. You can look up what these are by looking up help for a given geometry. Each geometry has all the aesthetics it accepts in its documentation. They also differ in what kinds of variables they expect (any combination of categorical vs continuous variables).\n\nLets expand the initial plot with `geom_point()` to make a scatterplot!\n\n```{r}\nmidwest %>%\n  ggplot() +\n  aes(x = percadultpoverty, y = percollege) +\n  geom_point()\n```\n\nWe got a plot very similar to the one we made with base R! We can customize it further if we want to. Lets say we want to represent each state with a different color. We just need to add a color aesthetic. R will add a legend automatically:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  aes(x = percadultpoverty, y = percollege, color = state) +\n  geom_point()\n```\n\nThere is one more thing about geometries and aesthetics. Remember you can declare aesthetics in different places? You can set global aesthetics inside the `ggplot()` function. If you do so these aesthetics will be used by default by all geometries in that plot. You can also set aesthetics inside a given geometry (in fact you can even set a different dataset for a given geometry; this is what we meant by independence of layers) but then they will be used only for this particular geometry and won't be inherited by other ones.\n\nCompare the to plots below. They produce the same result:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percadultpoverty, y = percollege)) +\n  geom_point()\n```\n\nAnd the second plot:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege))\n```\n\nSome common geometries you can encounter are as follows:\n\n-   `geom_histogram()` and `geom_density()` for displaying distributions of continuous variables\n\n-   `geom_bar()` for displaying counts of categorical variables (you can change counts to other summary statistic but more on that later)\n\n-   `geom_col()` for displaying differences in some continuous variable between levels of a factor\n\n-   `geom_point()`: your good old scatterplot\n\n-   `geom_boxplot()`\n\n-   `geom_violin()` a bit like boxplot but displays a distribution of a continuous variable for each level of a factor\n\n-   `geom_smooth()` for displaying lines of best fit (e.g. from a linear model)\n\nYou can check them out if you want to to see how they look like.\n\nLets look at 2 thing in a bit more details with regard to geometries. First, lets look at combining geoms. We can add a line of best fit to our scatterplot if we want to by adding an additional geometry. `geom_smooth()` will use a GAM or LOESS by default (depending on how many unique values x variable has) but we can set it to a linear model by adding `method = \"lm\"`. A linear model probably won't do well here but it's just for demonstration:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percadultpoverty, y = percollege)) +\n  geom_point() +\n  geom_smooth(method  =\"lm\")\n```\n\nSee? Just like building with lego blocks.\n\nLast thing before we move on: a few words on `geom_bar()` and `geom_col()`. They often get mixed up at the beginning because they both show bar plots. `geom_bar()` takes a single aesthetic and is generally used to display counts of some factor variable. For example if we wanted to see how many counties are there in each state we could use `geom_bar()` (later we'll see how to display e.g. means of variables across levels of a factor):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x=state)) +\n  geom_bar()\n```\n\n`geom_col()` takes at least 2 aesthetics: x and y. It needs one categorical and one continuous variable. By default it is going to sum all values in a given category. e.g. lets look at the sum of area of all counties in each of the states:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x=state, y = area)) +\n  geom_col()\n```\n\nWhat if we wanted to look at the average county area in each state? We can e.g. first summarise the dataset and then pipe it to plot:\n\n```{r}\nmidwest %>%\n  summarise(mean_area = mean(area), .by = state) %>%\n  ggplot(aes(x = state, y = mean_area)) +\n  geom_col()\n```\n\nSince `ggplot2` is part of `tidyverse` it's really easy to pipe a set of dplyr functions into a plot in a single call!\n\n## Attributes\n\nThere are situations in which you don't want to set some feature to be represented by a given variable but to set them to a fixed value for the entire plot/geometry. For example you might want to set the color or size of all points in a scatter plot. That's when you set attributes. They are declared inside geometries but outside of aesthetics. Lets say we want to take our scatterplot and change the transparency and color of the points. We can do it by defining them inside geometry. The names for the arguments are the same as for aesthetics. Just remember to use them outside of `aes()`!\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege), color = \"red\", alpha = .3)\n```\n\nBy the way, you can define colors either with hex values as RGB but you can also use one of the built-in colors in R. You can check all the names of those built-in colors with `colors()` function. Another neat thing is that in newer version of RStudio you can see the preview of the colors when you type them in a script.\n\nOne potential problem is when aesthetic and scale come into conflict. E.g. what will happen if we map color to state variable and then set it as attribute? Lets see:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = state), color = \"red\", alpha = .3)\n```\n\nThe attribute overrides the aesthetic. It's something to remember about.\n\n## Scales\n\nOne more thing are functions for working with scales: they allow you to have more control over how each scale is represented (e.g. what the breaks and values are, should the scale be transformed). For example notice that R automatically chose some limits for the scales and displayed breaks (the values on the axes). You can have more control over that with the `scale_` family of functions. It's a family of functions because you need to declare: 1) which aesthetic you want to change and 2) what kind of scale you are working with (continuous, discrete or binned). So for example `scale_x_continuous()` allows you to customize a continuous x axis. The basic things that you can change inside the `scale_` function are: breaks, labels, limits and the expand argument (the last one controls additional space - notice that e.g. on the x axis there is a little space on the left of 0 and there is similarly a little space to the right of the point with the highest percadultpoverty value).\n\nLets say now we want to work a little with our scales. Lets change the breaks to be every 5%, change the labels to be actually in percentage format (there is a very neat function in `scales` package called `label_percent()` that does that. We just need to set scale argument in it to 1 because in our dataset e.g. 10% is represented as 10 and not 0.1):\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege), color = \"red\", alpha = .3) + scale_x_continuous(breaks = seq(0,40,5),labels = scales::label_percent(scale = 1)) +\n  scale_y_continuous(breaks = seq(0,50,5),labels = scales::label_percent(scale = 1))\n```\n\nA cautionary tale about using limits in `scale_` functions: These limits work by filtering the data to be plotted. This can be a serious problem because you basically lose data when plotting and only get a warning about it. This can be especially problematic if you are trying to display bars or ranges because if e.g. one side of an interval falls out of the limits, the entire range will not be displayed. Lets see what happens if we set limits on one of our axes:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege), color = \"red\", alpha = .3) + scale_x_continuous(breaks = seq(0,25,5),labels = scales::label_percent(scale = 1), limits = c(0, 25)) +\n  scale_y_continuous(breaks = seq(0,50,5),labels = scales::label_percent(scale = 1))\n```\n\nNotice the warning about removed data. This is especially problematic in bar plots because by default they start from 0 (which can be a good thing because it reduces misinterpretation of visual differences between bars but can be undesired e.g. if displaying results of a 1-5 Likert scale which doesn't have a 0). Another problematic situation is when plotting some summaries e.g. means and limiting axes. Limits will work before calculating the summaries so you might get nonsensical plots because of this like below where we try to plot mean `percadultpoverty` by each state and limit the y axis to 10:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percadultpoverty)) +\n  geom_bar(stat = \"summary\", fun = mean) +\n  scale_y_continuous(limits = c(0,10))\n```\n\nThe warning now says that 220 rows were removed! What's even weirded we still got our plot but the means were calculated based on trimmed variable.\n\n## Colors\n\nScale functions also allow you to control the color and fill aesthetics. You can change which color palette you want to use. There are many packages available with predefined color palettes (e.g. `viridis` or `MetBrewer`). We'll focus on the built-in Brewer palettes and on making manual palettes. Brewer palettes can be invoked with `scale_color_brewer()` and `scale_fill_brewer()`. You can choose color palette by setting the `palette` argument. I can never remember the names of all the palettes but you can easily google them (just type something like \"R brewer palettes). Lets change our palette on the scatterplot:\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = state), alpha = .8) +\n  scale_color_brewer(palette = \"Dark2\")\n```\n\nYou can also set your own colors and create your own palette. In order to do that use `scale_color_manual()` and `scale_fill_manual()`. You can set the colors as hex or built-in colors in `values` argument. You can provide it a simple text vector or named vector to explicitly map each categorical variable (if you have categorical variables mapped to color or fill):\n\n```{r}\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = state), alpha = .8) +\n  scale_color_manual(values = c(\"IL\" = \"#5f0f40\", \"IN\" = \"#9a031e\", \"MI\" = \"#fb8b24\", \"OH\" = \"#e36414\", \"WI\" = \"#0f4c5c\"))\n```\n\nfor contiunous variables matched to color aesthetic this works a little different. You need `scale_color_gradient()` function. `scale_color_gradient2()` allows you to specify a midpoint and thus make a divergent palette. Lets code county area with color this time and specify our own palette with midpoint at the mean county area:\n\n```{r}\nmidpoint <- mean(midwest$area)\nmidwest %>%\n  ggplot() +\n  geom_point(aes(x = percadultpoverty, y = percollege, color = area)) +\n  scale_color_gradient2(low = \"#e63946\", mid = \"#8d99ae\", high = \"#1d3557\", midpoint = midpoint)\n```\n\nWhen using colors on a plot you need to be mindful of a number of things. Color is used to convey information so it should be visible. Try to avoid very small contrasts if you want something to stand out (e.g. using light grey on white background). Also remember that not everyone perceives color the same way so it is worth checking if your palette is suitable for everyone. Finally, color shouldn't be used just because \"it looks cool\". Generally everything that is in a plot should be there for a reason. Remember that data visualizations should convey information. That's their primary purpose. Using color can help with that but it can also make things more difficult to understand. E.g. using a lot of flashy colors just for the sake of using colors might make a plot much more difficult to understand for viewers. Finally, colors can be used to convey different kinds of information, from continuity (e.g. a palette going from light to dark blue to code a continuous variable liek percentage of adults in college), divergence (a palette going from dark blue through light blue and red to dark red to display polarization of opinions) or contrast (e.g. contrasting colors in a palette to display different US states).\n\n## Positions\n\nOne issue that pops up quite often, especially when adding color to aesthetics, is how to deal with overlapping values. On the plots above there were some overlapping points on the scatterplot but we could easily deal with it by adjusting transparency. There are situations when this is not so easy or even not desirable. For example you can't just as easily deal with overlapping bars. `ggplot2` has a number of position adjustments that help us deal with this problem. THey allow us to stack, normalize or nudge shapes so that they won't overlap. The basic position adjustments are:\n\n-   dodge: move shapes to the side (how much is controlled with the `width` argument)\n\n-   stack: stack shapes on top of each other\n\n-   fill: stack shapes on top of each other and normalize height (good for displaying proportions)\n\n-   jitter: add some random noise (you can adjust how much with `height` and `width` arguments). It's good for cluttered scatterplots\n\n-   nudge: slightly move shapes, good for nudging text\n\nOk, lets see some of them in action. We'll start with jitter. In some situation you might want to display point with a categorical x axis. This can be useful when showing a distribution, e.g. with `geom_violin()` and adding all the data points on top of it with `geom_point()`. IF we don't use any position adjustments we'll get something like this (we want to look at distribution of percollege in each state):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percollege)) +\n  geom_violin(alpha = .4) +\n  geom_point()\n```\n\nOk, lets add some jitter but constrain it to be only in width (adding jitter in height might change how we interpret some values!):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percollege)) +\n  geom_violin(alpha = .4) +\n  geom_point(position = position_jitter(height = 0, width = .2))\n```\n\nThis makes it much easier to see all the points!\n\nNow we'll move on to position adjustments in barplots. Lets say we want to look at number of counties in each state that are or are not in metro area(`inmetro` variable). We can do it by adding a `fill` aesthetic to the `geom_bar()`:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, fill = as.factor(inmetro))) +\n  geom_bar()\n```\n\nBy default `geom_bar()` uses the stack position adjustment. Lets experiment with it a little and see what happens if we add a fill adjustment:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, fill = as.factor(inmetro))) +\n  geom_bar(position = \"fill\")\n```\n\nNow we have proportions rather than counts. Remember that order here matters (proportions sum to 1 within each state. If we wanted to see the share of each state in metro vs non-metro counties in the midwest we would need to switch x and fill aesthetics).\n\nTo see position dodge we will look at `geom_col()`. Lets say we want to plot the average percentage of adults in poverty in metro and nonmetro counties in each state:\n\n```{r}\nmidwest %>%\n  summarise(mean_perc = mean(percadultpoverty), .by = c(state, inmetro)) %>%\n  ggplot(aes(x = inmetro, y = mean_perc, fill = state)) +\n  geom_col()\n```\n\nThis looks pretty bad right? `geom_col()` also uses stack adjustment by default. To make it more readable and compare the percentages we can use the dodge adjustment:\n\n```{r}\nmidwest %>%\n  summarise(mean_perc = mean(percadultpoverty), .by = c(inmetro, state)) %>%\n  ggplot(aes(x = as.factor(inmetro), y = mean_perc, fill = state)) +\n  geom_col(position = position_dodge(width = .9))\n```\n\nMuch better! Now we can compare the percentages across state and metro vs non-metro counties!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"nord","output-file":"09data_viz_1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","editor":"visual","theme":"theme.scss","toc-location":"left","page-layout":"full","title":"Data visualization part 1"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}