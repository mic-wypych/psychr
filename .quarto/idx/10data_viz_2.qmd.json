{"title":"Data visualization part 2","markdown":{"yaml":{"title":"Data visualization part 2","author":"MichaÅ‚ Wypych"},"headingText":"Plotting continued","containsRefs":false,"markdown":"\n\n\nWe know how to make various plots to display the data and how to control the attributes and scales. Now we'll move on to additional layers in `ggplot2`. We'll continue working with the `midwest` dataset from the previous lesson.\n\n## Faceting\n\nWe'll start with faceting as it is pretty straightforward. Plotting often involves including a lot of information in a single plot. Sometimes the amount of information might be too much to easily comprehend. One of the ways in which we can try to deal with this is by faceting. It allows us to create a separate subplot for each level of a factor variable. The two basic functions for faceting in `ggplot2` are `facet_wrap()` and `facet_grid()`. The main difference is in their syntax and how they display facets. The first one takes a formula-like syntax: `facet_wrap(~variable)`. It automatically tries to fit rows and columns and adjust the number of rows and colums (you can customize that if you want). The second one needs you to specify the rows and columns manually: `facet_grid(rows = vars(variable1), cols = vars(variable2)`.\n\nFor example lets say we are interested in relation between percentage of children below poverty and percentage of people with college degree in all 5 state with a split between metro and non-metro areas. That's a lot to cram into one plot so we can use faceting to make the plot more readable. Using `facet_wrap()` is super easy here:\n\n```{r}\nlibrary(tidyverse)\nmidwest %>%\n  ggplot(aes(x = percollege, y = percchildbelowpovert, color = as.factor(inmetro))) +\n  geom_point() +\n  facet_wrap(~state)\n```\n\nIf we wanted to display the same information but with `facet_grid()` we could do it like this (lets put `inmetro` as one of facets instead of color as well):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percollege, y = percchildbelowpovert)) +\n  geom_point() +\n  facet_grid(rows = vars(state), cols = vars(inmetro))\n```\n\nBy default R will fix x and y axis across all facets (which is generally good!). If you want to free any axis by setting the `scales` argument to `free_x` or `free_y` or `free` to free both axes.\n\n## Statistics\n\nThis layer allows us to add various statistics like means and confidence intervals to our plots. Functions in this layer start with `stat_` although sometimes they can be called within geoms as well.\n\nOne obvious way in which we can include summary statistics on our plot is to calculate them first and then pipe them to the plot. Two additional geoms that might come in handy here are `geom_errorbar()` and `geom_pointrange()` which allow you to display ranges (the second one with a mid point as well). We can make a very classic plot often called a dynamite plot to show means and a range of 1 standard error like this:\n\n```{r}\nmidwest %>%\n  group_by(state) %>%\n  summarise(mean_pct_college = mean(percollege),\n            sd_pct_college = sd(percollege),\n            se_pct_college = sd_pct_college/sqrt(n())) %>%\n  ggplot() +\n  geom_col(aes(x = state, y = mean_pct_college)) +\n  geom_errorbar(aes(x = state, ymin = mean_pct_college - se_pct_college, ymax = mean_pct_college + se_pct_college), width = .2)\n```\n\nYou can see how they resemble dynamites! Recall that `geom_col()` by default will start y axis from 0. If we wanted to use `geom_pointrange()` we could do everything in a single geom:\n\n```{r}\nmidwest %>%\n  group_by(state) %>%\n  summarise(mean_pct_college = mean(percollege),\n            sd_pct_college = sd(percollege),\n            se_pct_college = sd_pct_college/sqrt(n())) %>%\n  ggplot() +\n  geom_pointrange(aes(x = state, y = mean_pct_college, ymin = mean_pct_college - se_pct_college, ymax = mean_pct_college + se_pct_college))\n```\n\nSo we could go even further and add distributions to our plot to give us more information:\n\n```{r}\nmidwest %>%\n  group_by(state) %>%\n  summarise(mean_pct_college = mean(percollege),\n            sd_pct_college = sd(percollege),\n            se_pct_college = sd_pct_college/sqrt(n())) %>%\n  ggplot() +\n  geom_violin(data = midwest, aes(x = state, y = percollege, color = state, fill = state), alpha = .6) +\n  geom_pointrange(aes(x = state, y = mean_pct_college, ymin = mean_pct_college - se_pct_college, ymax = mean_pct_college + se_pct_college))\n```\n\nWe get much more information though when we show the entire distribution the ranges for standard errors become tiny. Also notice how `geom_violin()` specifies a new dataset, `midwest` rather than work on summaries. This again shows how `ggplot2` is like building lego - you can mix blocks and layers to build whatever you want.\n\nGenerally, dynamite plots are discouraged now. One problem with them is that they limit the number of information. A given mean can come from any number of underlying distributions and what those distributions are matters! An interpretation of a mean will differ depending on whether the distribution is nicely symmetrical or heavily skewed. What's more, bar plots aren't really the best way to display things like means. When we look at a bar it usually implies some count or proportion rather than a point estimate. A point estimate is, well... a point so maybe using points is better here.\n\nWe don't need to calculate all the statistics we want to display before we make the plot. For the most common things we can easily do it inside the plot by using `stat_summary()`. This function needs you to specify what function you want to plot (e.g. `mean` for average value or `mean_se` for average value and standard error range around it) and what geometry you want to show it. There are two arguments for specifying functions in `stat_summary()` and they differ in what they output. The first one, `fun.data` always returns a `ymin`, `y` and `ymax` values so it's perfect for displaying ranges around some value (like a mean and confidence interval). The second one, `fun` will return a single value `y`. You can add your own `fun.min` and `fun.max` if you want to. Lets remake the same plot as above but this time using `stat_summary()`:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percollege, color = state, fill = state)) +\n  geom_violin(alpha = .6) +\n  stat_summary(fun.data = \"mean_se\", color = \"black\")\n```\n\nYay, we got an identical plot!\n\nAnother function called `stat_function()` allows you to apply a custom statistical function and plot it. For example you can use it to plot cumulative density plot. The `ecdf()` function creates a function to generate the cumulative density function from a variable. Important thing about it is that it creates a function and not a vector of values or a dataframe. We can then use it inside `stat_function()` and add a line geom:\n\n```{r}\ntest <- ecdf(midwest$percollege)\nmidwest %>%\n  ggplot(aes(x = percollege)) +\n  stat_function(fun = test, geom = \"line\")\n```\n\n## Coordinates\n\nThis layer controls how the coordinates of the plot should be handled. Most likely you are used to plots with the cartesian space: an x and y axis that are perpendicular. However you can change that e.g. by fising the ratio of x to y axis, zooming in on a particualr part of the plot or even bending the axis altogether. All of this is handled in this layer. Its functions start with `coord_`. The basic one is `coord_cartesian()`:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0, 25))\n```\n\nNotice that this time we did not get any warnings about missing data. This way we can e.g. adjust the axis limits of a bar plot without losing the bars.\n\nNow for slightly weirder stuff. What if we bended the coordinates so that they are no longer simple cartesian but polar instead (imagine taking the x axis and bending it into a circle)? We get something like this:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, fill = state)) +\n  geom_bar(width = 1) +\n  coord_polar()\n```\n\nThis isn't really a common thing to do in plots. Some situations in which it might be justified is with some circular forms, e.g. when displaying hours\n\n## Theme\n\nThe final layer, called theme, controls all the non-data part of the plot: setting fonts, typeface, text size, controlling the background color, plot legend and the grid. It's generally controlled within the `theme()` function. And there's a lot to control! Theme layer is huge. If you look at the documentation of `theme()` function you can see just how many things can be customized in it. Apart from a few exceptions setting anything inside `theme()` is done by setting a specific argument to an appropriate type of object on the plot. There are 3 general types: `element_line()`, `element_text()` and `element_rect()`. Inside each of these 3 functions you specify everything you want to customize. If you want to turn off an element you can use `element_blank()`. The only exception is the legend which for some reason is turned off by using `legend.position = \"none\"` (by the way I think this is one of the most googled things by R users). You can see all of them used below:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n  geom_point() +\n  labs(title = \"Relation between percent below poverty and\\npercent with college education in each state\", x = \"Percent below poverty\", y = \"Percent with college degree\") +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey60\"),\n        title = element_text(face = \"bold\", colour = \"#5f0f40\"),\n        panel.background = element_rect(fill = \"#AAAAAA\"),\n        plot.background = element_rect(fill = \"#AAAAAA\"),\n        legend.background = element_rect(fill = \"#AAAAAA\"),\n        legend.key = element_rect(fill = \"#AAAAAA\"),\n        legend.position = \"top\")\n```\n\nApart from the `theme()` function there is a number of pre-specified themes that you can use. They allow you to quickly get a specific theme without needing to change everything manually. They can also be a good start for further customization. Lets see some examples:\n\n-   `theme_minimal()`:\n\n    ```{r}\n    midwest %>%\n      ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n      geom_point() +\n      theme_minimal()\n    ```\n\n```{=html}\n<!-- -->\n```\n-   `theme_bw()`:\n\n    ```{r}\n    midwest %>%\n      ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n      geom_point() +\n      theme_bw()\n    ```\n\n-   `theme_classic()`:\n\n    ```{r}\n    midwest %>%\n      ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n      geom_point() +\n      theme_classic()\n    ```\n\nYou can also create your own theme! You just need to create your own function:\n\n```{r}\ntheme_own <- function() {\n  theme_minimal() +\n    theme(text = element_text(face = \"bold\", color = \"#9a031e\"),\n          panel.background = element_rect(fill = \"grey60\", color = \"grey60\"),\n          plot.background = element_rect(fill = \"grey60\", color = \"grey60\"),\n          legend.background = element_rect(fill = \"grey60\"),\n          legend.key = element_rect(fill = \"grey60\"),\n          panel.grid = element_line(linetype = \"dashed\", color = \"grey40\"))\n}\n```\n\nNow we can use it in our plots!\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n  geom_point() +\n  theme_own()\n```\n\n### Fonts in R\n\nA note on working with fonts: if you want to work with more fonts than the built-in ones you will have to load them into R. This can sometimes prove quite problematic. The `showtext` package makes it much easier to work with e.g. Google fonts. Fonts are declared inside `theme()` in `family` argument.\n\n```{r}\nlibrary(showtext)\n#load the Merriweather font\nfont_add_google(\"Merriweather\")\n#set the fonts to automatically appear\nshowtext_auto()\n\n#set the font inside our plot\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n  geom_point() +\n  labs(title = \"Relation between percent below poverty and\\npercent with college education in each state\") +\n  theme(text = element_text(family = \"Merriweather\"))\n```\n","srcMarkdownNoYaml":"\n\n# Plotting continued\n\nWe know how to make various plots to display the data and how to control the attributes and scales. Now we'll move on to additional layers in `ggplot2`. We'll continue working with the `midwest` dataset from the previous lesson.\n\n## Faceting\n\nWe'll start with faceting as it is pretty straightforward. Plotting often involves including a lot of information in a single plot. Sometimes the amount of information might be too much to easily comprehend. One of the ways in which we can try to deal with this is by faceting. It allows us to create a separate subplot for each level of a factor variable. The two basic functions for faceting in `ggplot2` are `facet_wrap()` and `facet_grid()`. The main difference is in their syntax and how they display facets. The first one takes a formula-like syntax: `facet_wrap(~variable)`. It automatically tries to fit rows and columns and adjust the number of rows and colums (you can customize that if you want). The second one needs you to specify the rows and columns manually: `facet_grid(rows = vars(variable1), cols = vars(variable2)`.\n\nFor example lets say we are interested in relation between percentage of children below poverty and percentage of people with college degree in all 5 state with a split between metro and non-metro areas. That's a lot to cram into one plot so we can use faceting to make the plot more readable. Using `facet_wrap()` is super easy here:\n\n```{r}\nlibrary(tidyverse)\nmidwest %>%\n  ggplot(aes(x = percollege, y = percchildbelowpovert, color = as.factor(inmetro))) +\n  geom_point() +\n  facet_wrap(~state)\n```\n\nIf we wanted to display the same information but with `facet_grid()` we could do it like this (lets put `inmetro` as one of facets instead of color as well):\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percollege, y = percchildbelowpovert)) +\n  geom_point() +\n  facet_grid(rows = vars(state), cols = vars(inmetro))\n```\n\nBy default R will fix x and y axis across all facets (which is generally good!). If you want to free any axis by setting the `scales` argument to `free_x` or `free_y` or `free` to free both axes.\n\n## Statistics\n\nThis layer allows us to add various statistics like means and confidence intervals to our plots. Functions in this layer start with `stat_` although sometimes they can be called within geoms as well.\n\nOne obvious way in which we can include summary statistics on our plot is to calculate them first and then pipe them to the plot. Two additional geoms that might come in handy here are `geom_errorbar()` and `geom_pointrange()` which allow you to display ranges (the second one with a mid point as well). We can make a very classic plot often called a dynamite plot to show means and a range of 1 standard error like this:\n\n```{r}\nmidwest %>%\n  group_by(state) %>%\n  summarise(mean_pct_college = mean(percollege),\n            sd_pct_college = sd(percollege),\n            se_pct_college = sd_pct_college/sqrt(n())) %>%\n  ggplot() +\n  geom_col(aes(x = state, y = mean_pct_college)) +\n  geom_errorbar(aes(x = state, ymin = mean_pct_college - se_pct_college, ymax = mean_pct_college + se_pct_college), width = .2)\n```\n\nYou can see how they resemble dynamites! Recall that `geom_col()` by default will start y axis from 0. If we wanted to use `geom_pointrange()` we could do everything in a single geom:\n\n```{r}\nmidwest %>%\n  group_by(state) %>%\n  summarise(mean_pct_college = mean(percollege),\n            sd_pct_college = sd(percollege),\n            se_pct_college = sd_pct_college/sqrt(n())) %>%\n  ggplot() +\n  geom_pointrange(aes(x = state, y = mean_pct_college, ymin = mean_pct_college - se_pct_college, ymax = mean_pct_college + se_pct_college))\n```\n\nSo we could go even further and add distributions to our plot to give us more information:\n\n```{r}\nmidwest %>%\n  group_by(state) %>%\n  summarise(mean_pct_college = mean(percollege),\n            sd_pct_college = sd(percollege),\n            se_pct_college = sd_pct_college/sqrt(n())) %>%\n  ggplot() +\n  geom_violin(data = midwest, aes(x = state, y = percollege, color = state, fill = state), alpha = .6) +\n  geom_pointrange(aes(x = state, y = mean_pct_college, ymin = mean_pct_college - se_pct_college, ymax = mean_pct_college + se_pct_college))\n```\n\nWe get much more information though when we show the entire distribution the ranges for standard errors become tiny. Also notice how `geom_violin()` specifies a new dataset, `midwest` rather than work on summaries. This again shows how `ggplot2` is like building lego - you can mix blocks and layers to build whatever you want.\n\nGenerally, dynamite plots are discouraged now. One problem with them is that they limit the number of information. A given mean can come from any number of underlying distributions and what those distributions are matters! An interpretation of a mean will differ depending on whether the distribution is nicely symmetrical or heavily skewed. What's more, bar plots aren't really the best way to display things like means. When we look at a bar it usually implies some count or proportion rather than a point estimate. A point estimate is, well... a point so maybe using points is better here.\n\nWe don't need to calculate all the statistics we want to display before we make the plot. For the most common things we can easily do it inside the plot by using `stat_summary()`. This function needs you to specify what function you want to plot (e.g. `mean` for average value or `mean_se` for average value and standard error range around it) and what geometry you want to show it. There are two arguments for specifying functions in `stat_summary()` and they differ in what they output. The first one, `fun.data` always returns a `ymin`, `y` and `ymax` values so it's perfect for displaying ranges around some value (like a mean and confidence interval). The second one, `fun` will return a single value `y`. You can add your own `fun.min` and `fun.max` if you want to. Lets remake the same plot as above but this time using `stat_summary()`:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, y = percollege, color = state, fill = state)) +\n  geom_violin(alpha = .6) +\n  stat_summary(fun.data = \"mean_se\", color = \"black\")\n```\n\nYay, we got an identical plot!\n\nAnother function called `stat_function()` allows you to apply a custom statistical function and plot it. For example you can use it to plot cumulative density plot. The `ecdf()` function creates a function to generate the cumulative density function from a variable. Important thing about it is that it creates a function and not a vector of values or a dataframe. We can then use it inside `stat_function()` and add a line geom:\n\n```{r}\ntest <- ecdf(midwest$percollege)\nmidwest %>%\n  ggplot(aes(x = percollege)) +\n  stat_function(fun = test, geom = \"line\")\n```\n\n## Coordinates\n\nThis layer controls how the coordinates of the plot should be handled. Most likely you are used to plots with the cartesian space: an x and y axis that are perpendicular. However you can change that e.g. by fising the ratio of x to y axis, zooming in on a particualr part of the plot or even bending the axis altogether. All of this is handled in this layer. Its functions start with `coord_`. The basic one is `coord_cartesian()`:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0, 25))\n```\n\nNotice that this time we did not get any warnings about missing data. This way we can e.g. adjust the axis limits of a bar plot without losing the bars.\n\nNow for slightly weirder stuff. What if we bended the coordinates so that they are no longer simple cartesian but polar instead (imagine taking the x axis and bending it into a circle)? We get something like this:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = state, fill = state)) +\n  geom_bar(width = 1) +\n  coord_polar()\n```\n\nThis isn't really a common thing to do in plots. Some situations in which it might be justified is with some circular forms, e.g. when displaying hours\n\n## Theme\n\nThe final layer, called theme, controls all the non-data part of the plot: setting fonts, typeface, text size, controlling the background color, plot legend and the grid. It's generally controlled within the `theme()` function. And there's a lot to control! Theme layer is huge. If you look at the documentation of `theme()` function you can see just how many things can be customized in it. Apart from a few exceptions setting anything inside `theme()` is done by setting a specific argument to an appropriate type of object on the plot. There are 3 general types: `element_line()`, `element_text()` and `element_rect()`. Inside each of these 3 functions you specify everything you want to customize. If you want to turn off an element you can use `element_blank()`. The only exception is the legend which for some reason is turned off by using `legend.position = \"none\"` (by the way I think this is one of the most googled things by R users). You can see all of them used below:\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n  geom_point() +\n  labs(title = \"Relation between percent below poverty and\\npercent with college education in each state\", x = \"Percent below poverty\", y = \"Percent with college degree\") +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(color = \"grey60\"),\n        title = element_text(face = \"bold\", colour = \"#5f0f40\"),\n        panel.background = element_rect(fill = \"#AAAAAA\"),\n        plot.background = element_rect(fill = \"#AAAAAA\"),\n        legend.background = element_rect(fill = \"#AAAAAA\"),\n        legend.key = element_rect(fill = \"#AAAAAA\"),\n        legend.position = \"top\")\n```\n\nApart from the `theme()` function there is a number of pre-specified themes that you can use. They allow you to quickly get a specific theme without needing to change everything manually. They can also be a good start for further customization. Lets see some examples:\n\n-   `theme_minimal()`:\n\n    ```{r}\n    midwest %>%\n      ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n      geom_point() +\n      theme_minimal()\n    ```\n\n```{=html}\n<!-- -->\n```\n-   `theme_bw()`:\n\n    ```{r}\n    midwest %>%\n      ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n      geom_point() +\n      theme_bw()\n    ```\n\n-   `theme_classic()`:\n\n    ```{r}\n    midwest %>%\n      ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n      geom_point() +\n      theme_classic()\n    ```\n\nYou can also create your own theme! You just need to create your own function:\n\n```{r}\ntheme_own <- function() {\n  theme_minimal() +\n    theme(text = element_text(face = \"bold\", color = \"#9a031e\"),\n          panel.background = element_rect(fill = \"grey60\", color = \"grey60\"),\n          plot.background = element_rect(fill = \"grey60\", color = \"grey60\"),\n          legend.background = element_rect(fill = \"grey60\"),\n          legend.key = element_rect(fill = \"grey60\"),\n          panel.grid = element_line(linetype = \"dashed\", color = \"grey40\"))\n}\n```\n\nNow we can use it in our plots!\n\n```{r}\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n  geom_point() +\n  theme_own()\n```\n\n### Fonts in R\n\nA note on working with fonts: if you want to work with more fonts than the built-in ones you will have to load them into R. This can sometimes prove quite problematic. The `showtext` package makes it much easier to work with e.g. Google fonts. Fonts are declared inside `theme()` in `family` argument.\n\n```{r}\nlibrary(showtext)\n#load the Merriweather font\nfont_add_google(\"Merriweather\")\n#set the fonts to automatically appear\nshowtext_auto()\n\n#set the font inside our plot\nmidwest %>%\n  ggplot(aes(x = percbelowpoverty, y = percollege, color = state)) +\n  geom_point() +\n  labs(title = \"Relation between percent below poverty and\\npercent with college education in each state\") +\n  theme(text = element_text(family = \"Merriweather\"))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"monokai","output-file":"10data_viz_2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","editor":"visual","theme":"theme.scss","toc-location":"left","page-layout":"full","title":"Data visualization part 2","author":"MichaÅ‚ Wypych"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}