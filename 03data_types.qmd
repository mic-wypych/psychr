---
title: "Types of data"
author: "Michal Wypych"
---

So far we have worked only with single values or objects storing only one value. However, usually you want to work with whole sets of values like variables or whole datasets. There is a number of types of data you can encounter in R which allow you to do that. A fairly easy way to orient yourself in the different types of data is:

1.  how many dimensions does a given type have: you can think about it in terms of how many ways can you traverse a given object: if you can only move left or right then it has only one dimension. If you can move left or right and up or down then you have 2 dimensions.
2.  What kinds of values can it store? Some types can store values of only 1 type while others can store multiple types of values a the same time.

## Vectors

The most basic type of data is a vector. Vectors can store any number of values of the same type in 1 dimension. You can create a vector using `c()` function.

```{r}
my_very_first_vector <- c(1,2,3)
my_very_first_vector
```

Vectors are **indexed**: they have a first, second value etc. This means that you can access part of a vector -subset them. Subsetting is accomplished with `[]`. You can also subset a range of values from a vector wirh `[:]`:

```{r}
long_vector <- c(1,2,3,4,5,6,7,8,9,10)
long_vector[3:5]
```

If you try to put different types of values into one vector R will convert the types to a matching one. This is especially important when due to some mistake/error a single value of a different type gets lost in some other variable. Just a single value will trigger the whole variable to be converted!

```{r}
my_vector <- c(1, TRUE, 'some text')
my_vector
class(my_vector)
```

You can make pretty much the same operations on vectors as on single values. One of the great features of R is that by default it will make operations element wise - if you try to add two vectors together then the first element from vector 1 will be added to first element of vector 2 and so on (the fancy name for this is vectorization).

```{r}
numbers <- c(1,2,3,4,5)
numbers2 <- c(6,7,8,9,10)
numbers + numbers2

```

If the vectors have different lengths then R will start to recycle values from the shorter vectors. But it will output a warning if the length of one vector is not a multiple of the other vector.

```{r}
short_v <- c(1,2,3)
long_v <- c(1,2,3,4,5)
short_v + long_v
```

If you want to join two vectors together you can do it in 2 ways: the first one is with `c()` just like creating a new vector (and in fact it will simply create a new vector!). The other one is with `append()`. The first argument is the vector you want to append to and the second argument is the vector you want to append. `append()` also allows you to specify where to append the second vector with `after` argument that requires an index so you can put it e.g. inside the first vector rather than at the end

```{r}
append(long_v, short_v, after = 2)
```

Last thing about vectors is that they can be named: each element can have a name. This can be especially useful e.g. when the vector is a result of some statistical operations and you want to make it easier to understand which number means what (e.g. you want to put together the mean, median and mode in 1 vector). You can add names to elements in a vector simply with a `=`:

```{r}
named_vector <- c("element one" = 1, "element two" = 2)
named_vector
```

## Factors

Factors are much like vectors except that they are used for storing categorical values - they have levels. You can store variables such as country or experimental condition of participants in a factor. You can create a factor by calling `factor()` and passing it a vector as an argument.

```{r}
my_vector <- c('a', 'b', 'a', 'b')
my_factor <- factor(my_vector)
my_factor
```

Factors can also have ordered levels. You can make an ordered factor by setting `ordered = T` argument when creating a factor. Notice how the output looks different now: it includes information on the order.

```{r}
ordered_vec <- c('low', 'high', 'high', 'low', 'low')
ordered_fac <- factor(ordered_vec, ordered = T)
ordered_fac
```

You can also manually set the levels of a factor. You can do it when creating the factor. Notice that for ordered factor the order in which you pass the levels will determine the order of levels in the factor.

```{r}
ordered_vec <- c('low', 'high', 'high', 'low', 'low')
ordered_fac <- factor(ordered_vec, ordered = T, levels = c('low', 'high', 'medium'))
ordered_fac
```

## Matrices

Matrices are a bit like vectors but they have two dimensions. They have rows and columns but treat them in the same way. Because of this they can store only one type of values (much like vectors). You can create a matrix from scratch with the `matrix()` function. This function takes a vectors of values as its input (these are the values we will fill our matrix with) and additional information on how the matrix has to look - how many columns and rows it should have and whether to fill the matrix with values by rows or columns

```{r}
numbered_vector <- c(1,2,3,4,5,6,7,8,9)
my_matrix <- matrix(numbered_vector, nrow = 3, ncol = 3)
my_matrix
```

You can also create a matrix by 'glueing' vectors together. You can bind them either as rows (`rbind()` function) or by columns (`cbind()` function). Notice that the names of the vectors will be used either as names of rows or columns.

```{r}
vec1 <- c(1,2,3)
vec2 <- c(4,5,6)
cbind(vec1, vec2)
```

Since we have two dimensions subsetting matrices can work both on rows and columns. The general idea is still the same but we have to specify whether we are subsetting rows or columns. Rows always come first, columns second separated by a comma like this `matrix[rows,columns]`. You can select ranges of rows or columns just like in a vector.

```{r}
my_matrix[2,2]
```

If you want to select all rows or columns you can leave the space blank. Remember to keep the comma though!

```{r}
my_matrix[,3]
```

## Data frames

In a day to day analysis you will likely work with data frames most of the time. A data frame is like a matrix in that it has rows and columns but can store different types of values in each column (so that e.g. you can have some variables that are numeric and others that are text). A different way of thinking about data frames is as a list of vectors of the same length with each vector representing a different variable. Each row represents a different observation (e.g. participant).

You can create a data frame with `data.frame()` function passing all the variables as arguments. Lets create 3 vectors: author, title and year.

```{r}
author <- c('Allport', 'Heider', 'Lewin', 'Allport', 'Heider')
title <- c('Nature of Prejudice', 'Psychology of interpersonal relations',
           'Principles of Topological Psychology', 'Psychology of Rumor', 'The life of a psychologist: An autobiography')
year <- c(1954, 1958, 1936, 1947, 1983)

psych_books <- data.frame(author, title, year)
psych_books
```

Subsetting data frames works the same way as matrices. You can subset both on rows and columns. An important thing to remember (and one of the reasons a lot of people switch to tibbles which are kind of data frames+. We'll get to tibbles some time in the future) is that if you subset a single column the result will be a vector and not a dataframe. This sometimes is annoying if you are designing something that is supposed to work on data frames specifically.

There is one additional way of subsetting a data frame. Subsetting variables based on their position is tiresome because we rarely remember the order of all the columns (especially as our data frames get bigger). You can select a single variable using `$`:

```{r}
psych_books$author
```

Using the `$` operator reflects a way of thinking about datasets that is pretty common: data frames are ordered collections of variables and each variable has its name. You can also use `$` to create new variables. Just assign a vector of values to a new name in your dataframe:

```{r}
psych_books$discipline <- c('intergroup relations', 'social psychology',
                            'general psychology', 'social psychology',
                            'biography')
psych_books
```

Remember how we talked about element-wise operations on vectors? You can leverage it to easily create new variables that are results of operations on other variables. Thanks to this you can add a whole new variable that is a result of a mathematical operation in just one line (imagine adding a variable that is a sum of all points from a quiz for each student). Here's an example if we wanted to calculate how many years ago each book from our data frame was published:

```{r}
psych_books$book_age <- 2022 - psych_books$year
psych_books
```

## Lists

Lists are the final type of basic data in R we will discuss here. They are the most versatile ones - they can store anything inside of them: single values, vectors, matrices, dataframes or even other lists! One important feature of lists is that they are ordered: you can access their elements by position. So you can think of lists as collections of objects but there aren't really limits to what these objects are (in fact dataframes are very specific lists: they are collections of variables that have the same length and form a nice rectangular table). Lists are created with `list()`. Lets create a list of the plants in a house along with a value storing information on how many days ago did we last water them:

```{r}
list_of_objects <- list(
  plants = c('Calathea', 'Chamedora', 'Pilea', 'Philodendron'),
  days_since_watering = 5
)
list_of_objects
```

You might encounter lists if you need to store a number of different things together. E.g. results of many statistical analyses are stored in lists. In fact as you dive deeper into R you will start to encounter more and more lists because they are very versatile.

You can access objects stored in lists in a few ways. You can use the `[]` you used for all other types of data. An important feature of this type of subsetting is that the result will always be a list (even if it has only 1 element). The other option is to use double square brackets `[[]]`. This will extract the object inside a list so the result won't be a list (you can think of it as 'getting deeper' into the list to extract the exact element you want).

```{r collapse = FALSE}
list_of_objects[1]
list_of_objects[[1]]
```

If the elements in your list are named you can also use `$` to extract them.\\

```{r}
list_of_objects$days_since_watering
```
